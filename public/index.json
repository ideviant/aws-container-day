[
{
	"uri": "http://gotoaws.cloudguru.run/",
	"title": "AWS Container Day",
	"tags": [],
	"description": "",
	"content": "AWS Container Day 包含如下实验：  Container Workshop - ECS   Container Workshop - EKS   "
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/",
	"title": "Container Workshop - ECS",
	"tags": [],
	"description": "",
	"content": " 在本实验中，您将使用 Amazon Elastic Container Service (Amazon ECS) 将原有在EC2计算实例中部署的Web应用集群容器化，并将映像部署为在ECS集群中以容器的形式运行。\n "
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/overview/",
	"title": "架构概览",
	"tags": [],
	"description": "",
	"content": "a.客户端 客户端通过端口 80 向负载均衡器发出请求。\nb.负载均衡器 负载均衡器会将请求分发给所有的可用端口。\nc.目标组 实例会在应用程序的目标组中注册。\nd.容器端口 每个容器运行一个应用程序进程，该进程会在其命名空间内将 node.js 集群父端口绑定到端口 80。\ne.使用容器封装 node.js 整体式架构 node.js 集群父端口负责将流量分发给整体式应用程序内的工作线程。虽然此架构已经使用容器进行封装，但仍然是整体式架构，因为每个容器的功能都与其余容器相同。\n什么是Amazon ECS Amazon Elastic Container Service (Amazon ECS) 是一项高度可扩展、高性能的容器管理服务，支持 Docker 容器，让您能够轻松地在 Amazon EC2 实例的托管集群上运行应用程序。 只需进行简单的 API 调用，您便可以启动和停止支持 Docker 应用程序，查询集群的完整状态，使用各种熟悉的功能，包括安全组、Elastic Load Balancing、EBS 卷和 IAM 角色。\n您可以使用 Amazon ECS 根据您的资源需求和可用性要求在您的集群中安排容器的置放。您还可以集成自己的计划程序或第三方计划程序，以满足业务或应用程序的特定要求。\nAmazon ECS 无需额外付费。您只需为您创建的用于存储和运行应用程序的 AWS 资源（例如 EC2 实例或 EBS 卷）付费。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/prepare/",
	"title": "准备实验环境",
	"tags": [],
	"description": "",
	"content": "1.1 通过浏览器进入 https://dashboard.eventengine.run/ ，填入12位hash code，通过eventengine 进入aws控制台 1.2 通过AWS Cloud9搭建服务器环境 AWS Cloud9 为您提供了EC2基础设施资源并且一个可视化的编辑器。在本次实验中，您将通过Cloud9去创建一台具有公网访问权限的EC2实例，运行后续的实验。\n 打开AWS管理控制台，在Service菜单栏中输入关键字Cloud9，进入Cloud9 管理页面 点击Create environment,在Environment name and Description内输入 环境的名称 [username]_cloud9，点击 Next Step。 保持界面上的默认配置，本次实验不需要改动任何实例环境和网路环境， 点击 Next step 进入Review界面后，确认无误，点击Create Environment完成创建。此后界面会跳转到 Cloud9 的编辑器页面  1.3 创建 IAM 角色 Cloud9 通常使用动态生成 IAM 的认证授权信息，但目前和 EKS IAM Authentication 不兼容，因此我们直接给 Cloud 9 EC2 实例附加一个管理员权限的 IAM 角色，并禁止掉 Cloud9 默认的动态 IAM认证授权信息：\n 请新开一个页面,进入https://console.aws.amazon.com/iam/home#/roles,选择创建角色 第一步选择 AWS service 并选择 EC2,点击下一步 权限中选择 AdministratorAccess,点击下一步 输入角色名字 container-admin,点击创建角色 在EC2 Instances界面选择cloud9的EC2实例(名字为aws-cloud9-xxxxx),点击Actions/Instance Settings/Attach/Replace IAM Role,选择 container-admin 角色,点击Apply完成 关闭cloud9临时权限，并验证角色是否生效.   在cloud9中打开命令行并输入:\n#测试角色是否生效 aws sts get-caller-identity 如果可以正常返回以下内容(包含container-admin),则表示已经正确设置角色权限\n{ \u0026#34;Account\u0026#34;: \u0026#34;\u0026lt;your account id, etc.11111111\u0026gt;\u0026#34;, \u0026#34;UserId\u0026#34;: \u0026#34;AROAYVRRQ4TUEIX4VRZLN:i-0e011f5bb16f38173\u0026#34;, \u0026#34;Arn\u0026#34;: \u0026#34;arn:aws:sts:: \u0026lt;your account id, etc.11111111\u0026gt;:assumed-role/container-admin/i-0e011f5bb16f38173\u0026#34; } 1.4 下载项目 git clone https://github.com/awslabs/amazon-ecs-nodejs-microservices.git 1.5 预置存储库 创建存储库：\n 导航到 Amazon ECR 控制台。 在存储库页面上，选择创建存储库。 在创建存储库页面上，为您的存储库输入以下名称：api。 ⚐ 注意：在标签稳定性下，保留默认设置。 选择创建存储库。  存储库创建后，将有一条确认消息同存储库地址一起显示。 存储库地址采用以下格式：[account-ID].dkr.ecr.[region].amazonaws.com/[repo-name]。[account-ID]、[region] 和 [repo-name] 将是您的设置专有的。\n⚐ 注意：在本教程中，您将需要存储库地址。\n1.6 推送Docker镜像 cd ~/environment/amazon-ecs-nodejs-microservices/2-containerized/services/api 使用终端验证 Docker 登录：\n 运行 $(aws ecr get-login --no-include-email --region [your-region])。替换 [your-region]，例如：$(aws ecr get-login \u0026ndash;no-include-email \u0026ndash;region us-east-1)。 如果需要，请配置您的凭证。 如果身份验证成功，您将收到确认消息：登录成功。 要构建镜像，请在终端中运行以下命令：docker build -t api . ⚐ 注意：api 后需要添加句点 (.)。 构建完毕后，请标记镜像，以便将其推送到以下存储库：docker tag api:latest [account-ID].dkr.ecr.[region].amazonaws.com/api:v1 ⚐ 注意：将 [account-ID] 和 [region] 占位符替换为您的特定信息。 ⚐ 专业提示：:v1 代表镜像版本。每次构建镜像时，您都应该使此版本号递增一个数字。如果您使用脚本，可以使用自动生成的数字（例如时间戳）标记镜像。这是一个最佳实践。可让您以后轻松恢复到之前的容器镜像版本。 通过运行 docker push [account-id].dkr.ecr.[region].amazonaws.com/api:v1 将镜像推送到 Amazon ECR ⚐ 注意：将 [account-ID] 和 [region] 占位符替换为您的特定信息。  如果您导航到 Amazon ECR 存储库，应该会看到镜像标记为 v1。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step1/",
	"title": "步骤1 使用AWS CloudFormation启动ECS集群",
	"tags": [],
	"description": "",
	"content": "创建一个部署在 Application Load Balancer 后面的 Amazon ECS 集群。\n  导航至 AWS CloudFormation 控制台。\n  选择创建堆栈。\n  选择Amazon S3 URL，其中Amazon S3 URL为：https://xiaoyj.s3.us-east-2.amazonaws.com/container-day/ecs.yml, 然后点击下一步。\n  输入BreakTheMonolith-Demo作为堆栈名称。验证其他参数是否具有下列值：\n 所需容量 = 2 实例类型 = t2.micro 大小上限 = 2    选择下一步。\n  在配置堆栈选项页面，保留默认选项，向下滚动并选择下一步。\n  在审查 BreakTheMonolith-Demo 页面上向下滚动到页面底部，选中复选框确认功能声明，并选择创建堆栈。   您将看到状态为 CREATE_IN_PROGRESS 的堆栈。您可以选择屏幕右上角的“刷新”按钮查看进度。此过程通常需要不到 5 分钟的时间。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step2/",
	"title": "步骤2 检查您的集群是否正在运行",
	"tags": [],
	"description": "",
	"content": "导航到 Amazon ECS 控制台。 您的集群应该会显示在列表中。\n在 BreakTheMonolith-Demo 下选择集群，然后选择任务选项卡以验证没有正在运行的任务。\n选择 ECS 实例选项卡以验证有两个由 AWS CloudFormation 模板创建的 Amazon EC2 实例。 ⚐ 注意：如果您收到显示 ECS 代理已过时的消息，请选择了解详情获取更新 ECS 代理的说明。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step3/",
	"title": "步骤3 编写任务定义",
	"tags": [],
	"description": "",
	"content": "  从 Amazon ECS 左侧导航菜单中选择任务定义。\n  选择创建新任务定义。\n  在选择启动类型兼容性页面中，选择 EC2 选项，然后选择下一步。\n  在配置任务和容器定义页面上执行以下操作：\n  在任务定义名称字段中输入 api。\n  向下滚动至容器定义并选择添加容器。\n  在添加容器窗口中：\n 未定义的参数可留空白或使用默认设置。 在容器名称字段中输入 api。 在映像字段中输入 [account-ID].dkr.ecr.us-east-1.amazonaws.com/api:v1 将 [account-ID] 替换为您的具体信息。请确保标签 v1 与您在模块 1 中用于标记的值一致，并推送映像。这是在上一个模块中创建的 ECR 存储库映像的 URL。 在内存限制字段，验证硬限制已选中，然后输入 256 作为值。 在端口映射下，主机端口 = 0 且容器端口 = 3000。 滚动至 ENVIRONMENT，CPU 单元 = 256。      选择添加。 返回到配置任务和容器定义页面。\n  转至页面底部，然后选择创建。\n  您的任务定义将列在控制台中。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step4/",
	"title": "步骤4 配置 Application Load Balancer 目标组",
	"tags": [],
	"description": "",
	"content": "Application Load Balancer (ALB) 可让您的服务接受传入流量。ALB 会自动将流量路由到在集群上运行的容器实例（使用容器实例作为目标组）。\n查看您的 VPC 名称： 如果您不是第一次使用此 AWS 账户，则可能拥有多个 VPC。请务必使用正确的 VPC 配置您的目标组。\n 导航到 EC2 控制台的“负载均衡器”部分。 找到名为 demo 的负载均衡器。 选中 demo 旁边的复选框以查看该负载均衡器的详细信息。 在描述选项卡中，找到 VPC 属性（格式为：vpc-xxxxxxxxxxxxxxxxx）。 **⚐ 注意：**在下一步配置 ALB 目标组时，您需要 VPC 属性。  配置 ALB 目标组\n  导航到 EC2 控制台的“目标组”部分。\n  选择创建目标组。\n  配置以下目标组参数（下方未列出的参数，请保持默认值）：\n  对于目标组名称，请输入 api。\n  对于协议，请输入 HTTP。\n  对于端口，请输入 80。\n  请选择与负载均衡器中相匹配的 VPC 值。这很可能不是您的默认 VPC。\n  访问高级运行状况检查设置，并根据需要编辑以下参数：\n 对于正常运行阈值，请输入 2。 对于运行不正常阈值，请输入 2。 对于超时，请输入 5。 对于时间间隔，请输入 6。      选择创建。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step5/",
	"title": "步骤5 配置Application Load Balancer侦听器",
	"tags": [],
	"description": "",
	"content": "ALB 侦听器会查看指向您的 ALB 的传入连接请求。\n将侦听器添加到 ALB\n  导航到 EC2 控制台的“负载均衡器”部分。\n  选中 demo 旁边的复选框以查看该负载均衡器的详细信息。\n  选择侦听器选项卡。\n  选择添加侦听器并根据需求编辑以下参数：\n 对于协议:端口，请选择 HTTP，并输入 80。 对于默认操作，请选择转发至，然后在目标组字段，输入 api。    选择保存。\n  "
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step6/",
	"title": "步骤6 以服务的形式部署应用程序",
	"tags": [],
	"description": "",
	"content": "以服务的形式将整体式架构部署到集群中。\n  导航到 Amazon ECS 控制台，然后从左侧菜单栏中选择集群。\n  选中集群 BreakTheMonolith-Demo，选择服务选项卡，然后选择创建。\n  在配置服务页面上，编辑以下参数（并保留下面未列出参数的默认值）：\n 对于启动类型，选择 EC2。 对于服务名称，输入 api 对于任务数量，输入 1 选择下一步。    在配置网络页面上的负载均衡部分，选择Application Load Balancer。\n将会出现其他参数：服务 IAM 角色和负载均衡器名称。\n 对于服务 IAM 角色，选择 BreakTheMonolith-Demo-ECSServiceRole。 对于负载均衡器名称，验证是否已选中 demo。    在将容器添加到负载均衡部分，选择添加到负载均衡器。 系统将显示标记为 api:3000 的其他信息。\n  在api:3000部分，进行以下操作：\n 对于生产侦听器端口，选择 80:HTTP。 对于目标组名称，选择您的组：api。 选择下一步。    在设置 Auto Scaling 页面上，保留默认设置并选择下一步。\n  在审核页面上，审核设置，然后选择创建服务。\n  在创建了服务后，选择查看服务。\n  做得好！ 您现在已拥有正在运行的服务。容器可能要过 1 分钟后才能注册为运行正常，并开始接收流量。\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/1.ecs-lab/step7/",
	"title": "步骤7 测试您的容器化应用程序",
	"tags": [],
	"description": "",
	"content": "通过检查服务能否通过互联网访问并对其执行 ping 操作来验证您的部署。\n要查找您的服务 URL，请执行以下操作：\n 导航到 EC2 控制台的负载均衡器部分。 选择您的负载均衡器 demo。 在描述选项卡中，复制 DNS 名称并粘贴到新浏览器选项卡或窗口中。 您应该会看到一条消息：Ready to receive requests（可以接收请求了）。  **查看服务的各个部分：**node.js 应用程序会根据 URL 将流量路由到每个工作线程。要查看工作线程，只需将工作线程名称 api/[worker-name] 添加到 DNS 名称的末尾即可，如下所示：\n http://[DNS name]/api/users http://[DNS name]/api/threads http://[DNS name]/api/posts  您还可以在 URL 的末尾添加记录编号，以细化到特定记录。例如：http://[DNS name]/api/users/2\n"
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/",
	"title": "Container Workshop - EKS",
	"tags": [],
	"description": "",
	"content": " 在本实验中，您将使用 Amazon Elastic Kubernetes Service (Amazon EKS) 部署容器集群。\n "
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/step1/",
	"title": "步骤1 回到Cloud9环境中，设置默认region, 安装eksctl, kubectl工具",
	"tags": [],
	"description": "",
	"content": "我们将在之前创建的AWS Cloud9 环境里面安装eksctl,kubectl。进入Cloud9编辑器环境后，在终端中输入以下命令,进行安装。\n#设置默认region export AWS_DEFAULT_REGION=us-east-1 echo \u0026#34;export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}\u0026#34; \u0026gt;\u0026gt; ~/.bashrc #eksctl 版本\u0026gt; v0.20.0 curl -L \u0026#34;https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz\u0026#34; | tar xz -C . sudo mv ./eksctl /usr/local/bin #kubectl \u0026gt;v1.16.0 curl -LO --silent https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl chmod 775 ./kubectl sudo mv ./kubectl /usr/local/bin #安装jq sudo yum install -y jq  检查工具的版本 eksctl (版本\u0026gt;=0.20.0), kubectl(版本\u0026gt;=1.16)\n eksctl version kubectl version "
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/step2/",
	"title": "步骤2 创建EKS集群",
	"tags": [],
	"description": "",
	"content": "2.1. 打开Cloud9终端管理控制台， 使用eksctl 创建EKS集群(操作需要10-15分钟),该命令同时会创建一个使用t3.small的受管节点组。(这里需要check 一下eventengine默认的ec2 limit)\nexport CLUSTER_NAME=ekslab eksctl create cluster \\  --name=$CLUSTER_NAME \\  --version=1.16 \\  --managed 注意：如果报类似于以下的错：\n[ℹ] deploying stack \u0026#34;eksctl-ekslab-cluster\u0026#34; [✖] unexpected status \u0026#34;ROLLBACK_IN_PROGRESS\u0026#34; while waiting for CloudFormation stack \u0026#34;eksctl-ekslab-cluster\u0026#34; [ℹ] fetching stack events in attempt to troubleshoot the root cause of the failure [✖] AWS::EC2::SubnetRouteTableAssociation/RouteTableAssociationPrivateUSEAST1C: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EC2::Route/PublicSubnetRoute: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EC2::SubnetRouteTableAssociation/RouteTableAssociationPublicUSEAST1E: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EC2::SubnetRouteTableAssociation/RouteTableAssociationPrivateUSEAST1E: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EC2::NatGateway/NATGateway: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EC2::SubnetRouteTableAssociation/RouteTableAssociationPublicUSEAST1C: CREATE_FAILED – \u0026#34;Resource creation cancelled\u0026#34; [✖] AWS::EKS::Cluster/ControlPlane: CREATE_FAILED – \u0026#34;Cannot create cluster \u0026#39;ekslab\u0026#39; because us-east-1e, the targeted availability zone, does not currently have sufficient capacity to support the cluster. Retry and choose from these availability zones: us-east-1a, us-east-1b, us-east-1c, us-east-1d, us-east-1f (Service: AmazonEKS; Status Code: 400; Error Code: UnsupportedAvailabilityZoneException; Request ID: f1cb4458-f727-45ad-929d-514bc9184fa7; Proxy: null)\u0026#34; [!] 1 error(s) occurred and cluster has not been created properly, you may wish to check CloudFormation console [ℹ] to cleanup resources, run \u0026#39;eksctl delete cluster --region=us-east-1 --name=ekslab\u0026#39; [✖] waiting for CloudFormation stack \u0026#34;eksctl-ekslab-cluster\u0026#34;: ResourceNotReady: failed waiting for successful resource state Error: failed to create cluster \u0026#34;ekslab\u0026#34; 则表示该可用区控制层面实例容量已达上限，请使用错误消息中建议的可用区，先删除之前失败的堆栈，再创建集群：\neksctl delete cluster --region=us-east-1 --name=ekslab eksctl create cluster --name=$CLUSTER_NAME --version=1.16 --managed --zones=us-east-1a,us-east-1b 待集群创建完成后，查看EKS集群工作节点\nkubectl cluster-info kubectl get node 2.2. (可选)部署一个测试应用 在Cloud9创建一个nginx.yaml,内容如下\ncat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; nginx.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: nginx-deployment labels: app: nginx spec: replicas: 1 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx ports: - containerPort: 80 --- apiVersion: v1 kind: Service metadata: name: \u0026#34;service-nginx\u0026#34; annotations: service.beta.kubernetes.io/aws-load-balancer-type: nlb spec: selector: app: nginx type: LoadBalancer ports: - protocol: TCP port: 80 targetPort: 80 EOF  部署nginx\n #部署 kubectl apply -f nginx.yaml kubectl get deploy kubectl get svc #待nlb状态为active，目标组健康状况检查通过后进行测试 ELB=$(kubectl get svc service-nginx -o json | jq -r \u0026#39;.status.loadBalancer.ingress[].hostname\u0026#39;) echo $ELB curl $ELB  清除\n kubectl delete -f nginx.yaml "
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/step3/",
	"title": "步骤3 配置ALB Ingress Controller",
	"tags": [],
	"description": "",
	"content": "3.1 使用ALB Ingress Controller\n参考文档\nhttps://docs.aws.amazon.com/eks/latest/userguide/alb-ingress.html\nhttps://aws.amazon.com/cn/blogs/opensource/kubernetes-ingress-aws-alb-ingress-controller/\n 3.2.1 创建ALB Ingress Controller所需要的IAM policy , EKS OIDC provider, service account\n  3.2.1.1 创建EKS OIDC Provider (这个操作每个集群只需要做一次）\n eksctl utils associate-iam-oidc-provider --cluster=${CLUSTER_NAME} --approve --region ${AWS_DEFAULT_REGION} [ℹ] eksctl version 0.24.0-rc.0 [ℹ] using region us-east-1 [ℹ] will create IAM Open ID Connect provider for cluster \u0026#34;ekslab\u0026#34; in \u0026#34;us-east-1\u0026#34; [✔] created IAM Open ID Connect provider for cluster \u0026#34;ekslab\u0026#34; in \u0026#34;us-east-1\u0026#34;  3.2.1.2 下载并创建ALB入口控制器pod所需的IAM policy\n curl -o iam-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/iam-policy.json aws iam create-policy --policy-name ALBIngressControllerIAMPolicy \\  --policy-document file://iam-policy.json --region ${AWS_DEFAULT_REGION} # 记录返回的Plociy ARN POLICY_NAME=$(aws iam list-policies --query \u0026#39;Policies[?PolicyName==`ALBIngressControllerIAMPolicy`].Arn\u0026#39; --output text --region ${AWS_DEFAULT_REGION})  3.2.1.3 请使用上述返回的policy ARN创建service account\n eksctl create iamserviceaccount \\  --cluster=${CLUSTER_NAME} \\  --namespace=kube-system \\  --name=alb-ingress-controller \\  --attach-policy-arn=${POLICY_NAME} \\  --override-existing-serviceaccounts \\  --approve 参考输出 [ℹ] eksctl version 0.24.0-rc.0 [ℹ] using region us-east-1 [ℹ] 1 iamserviceaccount (kube-system/alb-ingress-controller) was included (based on the include/exclude rules) [!] metadata of serviceaccounts that exist in Kubernetes will be updated, as --override-existing-serviceaccounts was set [ℹ] 1 task: { 2 sequential sub-tasks: { create IAM role for serviceaccount \u0026#34;kube-system/alb-ingress-controller\u0026#34;, create serviceaccount \u0026#34;kube-system/alb-ingress-controller\u0026#34; } } [ℹ] building iamserviceaccount stack \u0026#34;eksctl-ekslab-addon-iamserviceaccount-kube-system-alb-ingress-controller\u0026#34; [ℹ] deploying stack \u0026#34;eksctl-ekslab-addon-iamserviceaccount-kube-system-alb-ingress-controller\u0026#34; [ℹ] created serviceaccount \u0026#34;kube-system/alb-ingress-controller\u0026#34; 3.3 部署 ALB Ingress Controller\n 3.3.1 创建 ALB Ingress Controller 所需要的RBAC\n kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/rbac-role.yaml  3.3.2 部署 ALB Ingress Controller\n kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/alb-ingress-controller.yaml 修改alb-ingress-controller.yaml 为以下配置\n#为alb-ingress-controller.yaml添加以下内容（在--ingress-class下添加集群名称即可，注意不要用tab进行缩进） kubectl edit deployment.apps/alb-ingress-controller -n kube-system spec: containers: - args: - --ingress-class=alb - --cluster-name=\u0026lt;步骤2 创建的集群名字\u0026gt; #确认ALB Ingress Controller是否工作 kubectl get pods -n kube-system #参考输出 ------------------------------------------------------------------------------- NAME READY STATUS RESTARTS AGE alb-ingress-controller-55b5bbcb5b-bc8q9 1/1 Running 0 56s ------------------------------------------------------------------------------- 3.3 使用ALB Ingress，部署2048 game\nkubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-namespace.yaml kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-deployment.yaml kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-service.yaml kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-ingress.yaml #几分钟后，验证是否已使用以下命令创建入口资源 kubectl get ingress/2048-ingress -n 2048-game #输出类似于 ------------------------------------------------------------------------------- NAME HOSTS ADDRESS PORTS AGE 2048-ingress * example-2048game-2048ingr-6fa0-352729433.region-code.elb.amazonaws.com 80 24h ------------------------------------------------------------------------------- #在console上观察alb状态，等到active后，在浏览器输入dns名称，看看是否能访问 #清除资源 kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-ingress.yaml kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-service.yaml kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-deployment.yaml kubectl delete -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/v1.1.8/docs/examples/2048/2048-namespace.yaml "
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/step4/",
	"title": "步骤4 部署官方的Kubernetes dashboard",
	"tags": [],
	"description": "",
	"content": "5.1 下载配置文件\n#2.0.0rc3 kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc3/aio/deploy/recommended.yaml kubectl get pods -n kube-system kubectl get services -n kube-system #通过kubectl proxy 进行访问 #由于我们部署的EKS cluster是private cluster，所以我们需要通过 proxy. Kube-proxy进行访问Dashboard kubectl proxy --port=8080 --address=\u0026#39;0.0.0.0\u0026#39; --disable-filter=true \u0026amp; #登录 #在cloud9里面选择tools -\u0026gt; preview -\u0026gt; preview run application #在URL的结尾附加：/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/，然后按回车 #获取登录的token aws eks get-token --cluster-name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION} | jq -r \u0026#39;.status.token\u0026#39; 选择 Dashbaord 登录页面的 “Token” 单选按钮，复制上述命令的输出，粘贴，之后点击 Sign In。 #资源清理 pkill -f \u0026#39;kubectl proxy --port=8080\u0026#39; #删除dashboard kubectl delete -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-rc3/aio/deploy/recommended.yaml "
},
{
	"uri": "http://gotoaws.cloudguru.run/2.eks-lab/step5/",
	"title": "步骤5 配置使用EBS CSI",
	"tags": [],
	"description": "",
	"content": "5.1 创建所需要的IAM policy , EKS OIDC provider, service account\n5.1.1 创建所需要的IAM policy\n#下载csi driver git clone https://github.com/kubernetes-sigs/aws-ebs-csi-driver.git #下载policy curl -sSL -o ebs-csi-policy.json https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/v0.4.0/docs/example-iam-policy.json #创建ebs CSI 需要的IAM策略,如果报错请检查策略是否已经存在 aws iam create-policy \\  --policy-name Amazon_EBS_CSI_Driver \\  --policy-document file://ebs-csi-policy.json \\  --region ${AWS_DEFAULT_REGION} #返回示例,请记录返回的Plociy ARN POLICY_NAME=$(aws iam list-policies --query \u0026#39;Policies[?PolicyName==`Amazon_EBS_CSI_Driver`].Arn\u0026#39; --output text --region ${AWS_DEFAULT_REGION}) 5.1.2 获取EKS工作节点的IAM role\n# 注意这一步如果是多个nodegroup就会有多个role kubectl -n kube-system describe configmap aws-auth # 单个节点组 ROLE_NAME=\u0026lt;Role-name-in-above-output\u0026gt; aws iam attach-role-policy --policy-arn ${POLICY_NAME} \\  --role-name ${ROLE_NAME} --region ${AWS_DEFAULT_REGION} 5.1.3 部署EBS CSI 驱动到eks 集群\n官方文档 https://docs.aws.amazon.com/zh_cn/eks/latest/userguide/ebs-csi.html\nkubectl apply -k aws-ebs-csi-driver/deploy/kubernetes/overlays/stable #验证部署是否正确 kubectl get pods -n kube-system | grep csi #参考输出,每个节点会各自部署ebs-csi-controller和ebs-csi-node NAME READY STATUS RESTARTS AGE ebs-csi-controller-78bc69cb98-cddl6 4/4 Running 0 4m5s ebs-csi-controller-78bc69cb98-ng6nx 4/4 Running 0 4m5s ebs-csi-node-l4m88 3/3 Running 0 4m5s ebs-csi-node-z86xc 3/3 Running 0 4m5s 5.2 部署动态卷实例应用\n#specs中定义了名为app的pod，pod中定义了pvc的存储需求，拿到卷后会挂载到/data路径下，并且每隔5s向/data路径下out.txt文本文件的添加数据 kubectl apply -f aws-ebs-csi-driver/examples/kubernetes/dynamic-provisioning/specs/ #查看storageclass kubectl describe storageclass ebs-sc #查看示例app状态 kubectl get pods --watch kubectl get pv PV_NAME=$(kubectl get pv -o json | jq -r \u0026#39;.items[0].metadata.name\u0026#39;) kubectl describe persistentvolumes ${PV_NAME} #查看数据是否写成功 kubectl exec -it app -- tail -f /data/out.txt # Thu Mar 5 14:19:43 UTC 2020 # Thu Mar 5 14:19:48 UTC 2020 #删除示例程序 kubectl delete -f aws-ebs-csi-driver/examples/kubernetes/dynamic-provisioning/specs/ "
},
{
	"uri": "http://gotoaws.cloudguru.run/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://gotoaws.cloudguru.run/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]